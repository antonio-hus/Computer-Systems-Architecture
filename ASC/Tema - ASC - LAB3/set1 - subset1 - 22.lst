     1                                  ; Laboratory 3 Exercises | Additions, subtractions | Subset One | Exercise 22
     2                                  
     3                                  bits 32 
     4                                  global start        
     5                                  
     6                                  extern exit              
     7                                  import exit msvcrt.dll    
     8                                  
     9                                  ;a - byte, b - word, c - double word, d - qword - Unsigned representation
    10                                  segment data use32 class=data
    11 00000000 02                          a db 2
    12 00000001 0100                        b dw 1
    13 00000003 03000000                    c dd 3
    14 00000007 0C00000000000000            d dq 12
    15                                  
    16                                  segment code use32 class=code
    17                                      start:
    18                                          
    19                                          ; (d+c) - (c+b) - (b+a)
    20                                          
    21                                          ; d - quadword - EDX:EAX => d = d+c = 12+3 = 15
    22 00000000 A1[07000000]                    mov EAX, dword[d+0]
    23 00000005 8B15[0B000000]                  mov EDX, dword[d+4]
    24                                          
    25 0000000B 8B1D[03000000]                  mov EBX, [c]
    26 00000011 B900000000                      mov ECX, 0
    27                                          
    28 00000016 F8                              clc
    29 00000017 01D8                            add EAX, EBX
    30 00000019 11CA                            adc EDX, ECX
    31                                          
    32 0000001B A3[07000000]                    mov dword[d+0], EAX
    33 00000020 8915[0B000000]                  mov dword[d+4], EDX
    34                                          
    35                                          ; c = c+b = 3+1 = 4
    36 00000026 A1[03000000]                    mov EAX, [c]
    37 0000002B BB00000000                      mov EBX, 0 
    38 00000030 668B1D[01000000]                mov BX, [b]
    39 00000037 01D8                            add EAX, EBX
    40 00000039 A3[03000000]                    mov dword[c], EAX
    41                                          
    42                                          ; b = b+a = 1+2 = 3
    43 0000003E 66A1[01000000]                  mov AX, [b]
    44 00000044 66BB0000                        mov BX, 0
    45 00000048 8A1D[00000000]                  mov BL, [a]
    46 0000004E 6601D8                          add AX, BX
    47 00000051 66A3[01000000]                  mov word[b], AX
    48                                          
    49                                          ; EDX:EAX = d-c-b = 15-4-3 = 8
    50 00000057 A1[07000000]                    mov EAX, dword[d+0]
    51 0000005C 8B15[0B000000]                  mov EDX, dword[d+4]
    52                                          
    53 00000062 8B1D[03000000]                  mov EBX, [c]
    54 00000068 B900000000                      mov ECX, 0
    55                                          
    56 0000006D F8                              clc
    57 0000006E 29D8                            sub EAX, EBX
    58 00000070 19CA                            sbb EDX, ECX
    59                                          
    60 00000072 BB00000000                      mov EBX, 0
    61 00000077 668B1D[01000000]                mov BX, [b]
    62 0000007E B900000000                      mov ECX, 0
    63                                          
    64 00000083 F8                              clc
    65 00000084 29D8                            sub EAX, EBX
    66 00000086 19CA                            sbb EDX, ECX
    67                                          
    68                                          ; results in EDX:EAX
    69                                          
    70 00000088 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    71 0000008A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
