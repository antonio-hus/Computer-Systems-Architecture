     1                                  ;Exercise 22
     2                                  ; Given the doubleword A and the word B, compute the word C as follows:
     3                                  ; the bits 0-4 of C are the invert of the bits 20-24 of A
     4                                  ; the bits 5-8 of C have the value 1
     5                                  ; the bits 9-12 of C are the same as the bits 12-15 of B
     6                                  ; the bits 13-15 of C are the same as the bits 7-9 of A
     7                                  
     8                                  bits 32 
     9                                  global start        
    10                                  
    11                                  extern exit               
    12                                  import exit msvcrt.dll    
    13                                  
    14                                  segment data use32 class=data
    15 00000000 5777315B                    a dd 01011011001100010111011101010111b
    16 00000004 BE9B                        b dw 1001101110111110b
    17 00000006 0000                        c dw 0
    18                                  
    19                                  segment code use32 class=code
    20                                      start:
    21                                      
    22                                          ; result in BX but we need
    23 00000000 BB00000000                      mov EBX, 0
    24                                          
    25                                          ; the bits 0-4 of C are the invert of the bits 20-24 of A ( 10011 from A -> 01100 inverted -> 00000000000000000000000000001100b )
    26 00000005 A1[00000000]                    mov EAX, [a]
    27 0000000A F7D0                            not EAX
    28 0000000C 250000F800                      and EAX, 00000000111110000000000000000000b
    29 00000011 B114                            mov CL, 20
    30 00000013 D3C8                            ror EAX, CL
    31 00000015 09C3                            or EBX, EAX
    32                                          
    33                                          ; the bits 5-8 of C have the value 1 ( 00000000000000000000000111101100b )
    34 00000017 81CBE0010000                    or EBX, 00000000000000000000000111100000b
    35                                          
    36                                          ; the bits 9-12 of C are the same as the bits 12-15 of B ( from B: 1001 -> C: 00000000000000000001001111101100b )
    37 0000001D 66A1[04000000]                  mov AX, [b]
    38 00000023 662500F0                        and AX, 1111000000000000b
    39 00000027 B103                            mov CL, 3
    40 00000029 66D3C8                          ror AX, CL
    41 0000002C 6609C3                          or BX, AX
    42                                          
    43                                          ; the bits 13-15 of C are the same as the bits 7-9 of A ( from A: 110 -> C: 00000000000000001101001111101100b )
    44 0000002F A1[00000000]                    mov EAX, [a]
    45 00000034 2580030000                      and EAX, 00000000000000000000001110000000b
    46 00000039 B106                            mov CL, 6
    47 0000003B D3C0                            rol EAX, CL
    48 0000003D 09C3                            or EBX, EAX
    49                                          
    50 0000003F 66891D[06000000]                mov word[c], BX
    51                                          
    52                                          ; results in BX and C => C: 1101 0011 1110 1100b
    53                                          
    54 00000046 6A00                            push    dword 0      
    55 00000048 FF15[00000000]                  call    [exit]       
