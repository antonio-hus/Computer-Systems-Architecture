     1                                  ; Laboratory 8 - Text File Operation - Exercise 7
     2                                  
     3                                  ; A file name and a decimal number (on 16 bits) are given (the decimal number is in the unsigned interpretation). 
     4                                  ; Create a file with the given name and write each digit composing the number on a different line to file.
     5                                  
     6                                  bits 32 
     7                                  global start        
     8                                  
     9                                  extern exit, fprintf, fopen, fclose
    10                                  import exit msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fopen msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                  
    15                                  segment data use32 class=data
    16                                  
    17 00000000 637265617465646669-         file_name db "createdfile.txt", 0
    17 00000009 6C652E74787400     
    18 00000010 FFFFFFFF                    file_descriptor dd -1   
    19 00000014 7700                        access_mode db "w", 0
    20                                      
    21                                      ten equ 10
    22 00000016 5B3C                        given_number dw 0x3C5B ; Decimal for 15.451 - fits on 16 bits
    23                                      
    24 00000018 2564200A0000                format dw `%d \n`, 0 ; using backticks ` to allow the assembler to view \n as eof - NASM Documentation
    25                                      
    26                                  segment code use32 class=code
    27                                      start:
    28                                      
    29                                          ; Creating a file using fopen()
    30                                          ; EAX = fopen(file_name, access_mode) - EAX = file descriptor
    31 00000000 68[14000000]                    push dword access_mode
    32 00000005 68[00000000]                    push dword file_name
    33 0000000A FF15[00000000]                  call [fopen]
    34 00000010 83C408                          add esp, 4*2
    35                                          
    36                                          ; Check if the file was created successfully - EAX != 0
    37 00000013 83F800                          cmp EAX, 0
    38 00000016 744A                            je final
    39                                          
    40                                              ; Saving the file descriptor to free EAX for later computations
    41 00000018 A3[10000000]                        mov dword[file_descriptor], EAX
    42                                          
    43                                              ; Writing in the file
    44                                              
    45                                              ; Pseudocode for the code section below
    46                                              ; if given_number > 0
    47                                              ; do 
    48                                              ;   digit = given_number % 10
    49                                              ;   given_number = given_number / 10
    50                                              ;   write(digit)
    51                                              ; until given_number == 0
    52                                              
    53                                              ; skip if given_number is 0
    54 0000001D 66A1[16000000]                      mov AX, word[given_number]
    55 00000023 6683F800                            cmp AX, 0
    56 00000027 742A                                je cleanup
    57                                          
    58                                              get_digits_loop:
    59                                                  
    60                                                  ; quotient in AX, remainder in DX
    61                                                  ; free DX for the operation
    62 00000029 66BA0000                                mov DX, 0
    63 0000002D 66BB0A00                                mov BX, ten
    64 00000031 66F7F3                                  div BX
    65                                                  
    66 00000034 60                                      PUSHAD
    67                                                  
    68                                                  ; Printing the remainder DX ( exteneded to EDX )
    69                                                  ; printf(file descriptor, format, number)
    70 00000035 52                                      push dword EDX
    71 00000036 68[18000000]                            push dword format
    72 0000003B FF35[10000000]                          push dword [file_descriptor]
    73 00000041 FF15[00000000]                          call [fprintf] 
    74 00000047 83C40C                                  add esp, 4*3
    75                                                  
    76 0000004A 61                                      POPAD
    77                                                  
    78                                                  ; Exiting the loop when the quotient becomes 0
    79 0000004B 6683F800                                cmp AX, 0
    80 0000004F 7402                                    je cleanup
    81                                                  
    82 00000051 EBD6                                jmp get_digits_loop
    83                                                  
    84                                              ; Closing the file
    85                                              ; fclose(file_descriptor)
    86                                              cleanup:
    87                                              
    88 00000053 FF35[10000000]                      push dword[file_descriptor]
    89 00000059 FF15[00000000]                      call [fclose]
    90 0000005F 83C404                              add esp, 4
    91                                          
    92                                          final:
    93 00000062 6A00                            push    dword 0      
    94 00000064 FF15[00000000]                  call    [exit]       
